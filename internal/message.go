// Code generated by ent, DO NOT EDIT.

package internal

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/pulkitbhardwaj/matrix/internal/message"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// From holds the value of the from edge.
	From []*Message `json:"from,omitempty"`
	// To holds the value of the to edge.
	To []*Message `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedFrom map[string][]*Message
	namedTo   map[string][]*Message
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) FromOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.From, nil
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) ToOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.To, nil
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldBody:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case message.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				m.Body = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryFrom queries the "from" edge of the Message entity.
func (m *Message) QueryFrom() *MessageQuery {
	return NewMessageClient(m.config).QueryFrom(m)
}

// QueryTo queries the "to" edge of the Message entity.
func (m *Message) QueryTo() *MessageQuery {
	return NewMessageClient(m.config).QueryTo(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("internal: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(m.Body)
	builder.WriteByte(')')
	return builder.String()
}

// NamedFrom returns the From named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Message) NamedFrom(name string) ([]*Message, error) {
	if m.Edges.namedFrom == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedFrom[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Message) appendNamedFrom(name string, edges ...*Message) {
	if m.Edges.namedFrom == nil {
		m.Edges.namedFrom = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		m.Edges.namedFrom[name] = []*Message{}
	} else {
		m.Edges.namedFrom[name] = append(m.Edges.namedFrom[name], edges...)
	}
}

// NamedTo returns the To named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Message) NamedTo(name string) ([]*Message, error) {
	if m.Edges.namedTo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedTo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Message) appendNamedTo(name string, edges ...*Message) {
	if m.Edges.namedTo == nil {
		m.Edges.namedTo = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		m.Edges.namedTo[name] = []*Message{}
	} else {
		m.Edges.namedTo[name] = append(m.Edges.namedTo[name], edges...)
	}
}

// Messages is a parsable slice of Message.
type Messages []*Message
