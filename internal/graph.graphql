directive @goField(
	forceResolver: Boolean
	name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
	model: String
	models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
	@goModel(model: "github.com/pulkitbhardwaj/matrix/internal.Noder") {
	"""
	The id of the object.
	"""
	id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
	"""
	Specifies an ascending order for a given `orderBy` argument.
	"""
	ASC
	"""
	Specifies a descending order for a given `orderBy` argument.
	"""
	DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: Cursor
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: Cursor
}
type Query {
	"""
	Fetches an object given its ID.
	"""
	node(
		"""
		ID of the object.
		"""
		id: ID!
	): Node
	"""
	Lookup nodes by a list of IDs.
	"""
	nodes(
		"""
		The list of node IDs.
		"""
		ids: [ID!]!
	): [Node]!
}
"""
The builtin Time type
"""
scalar Time
type User implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	firstName: String!
	lastName: String!
	emailAddress: String!
	userName: String!
	bio: String
	followers(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Users returned from the connection.
		"""
		where: UserWhereInput
	): UserConnection!
	following(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Filtering options for Users returned from the connection.
		"""
		where: UserWhereInput
	): UserConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
	"""
	A list of edges.
	"""
	edges: [UserEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge.
	"""
	node: User
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
	not: UserWhereInput
	and: [UserWhereInput!]
	or: [UserWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""
	first_name field predicates
	"""
	firstName: String
	firstNameNEQ: String
	firstNameIn: [String!]
	firstNameNotIn: [String!]
	firstNameGT: String
	firstNameGTE: String
	firstNameLT: String
	firstNameLTE: String
	firstNameContains: String
	firstNameHasPrefix: String
	firstNameHasSuffix: String
	firstNameEqualFold: String
	firstNameContainsFold: String
	"""
	last_name field predicates
	"""
	lastName: String
	lastNameNEQ: String
	lastNameIn: [String!]
	lastNameNotIn: [String!]
	lastNameGT: String
	lastNameGTE: String
	lastNameLT: String
	lastNameLTE: String
	lastNameContains: String
	lastNameHasPrefix: String
	lastNameHasSuffix: String
	lastNameEqualFold: String
	lastNameContainsFold: String
	"""
	email_address field predicates
	"""
	emailAddress: String
	emailAddressNEQ: String
	emailAddressIn: [String!]
	emailAddressNotIn: [String!]
	emailAddressGT: String
	emailAddressGTE: String
	emailAddressLT: String
	emailAddressLTE: String
	emailAddressContains: String
	emailAddressHasPrefix: String
	emailAddressHasSuffix: String
	emailAddressEqualFold: String
	emailAddressContainsFold: String
	"""
	user_name field predicates
	"""
	userName: String
	userNameNEQ: String
	userNameIn: [String!]
	userNameNotIn: [String!]
	userNameGT: String
	userNameGTE: String
	userNameLT: String
	userNameLTE: String
	userNameContains: String
	userNameHasPrefix: String
	userNameHasSuffix: String
	userNameEqualFold: String
	userNameContainsFold: String
	"""
	bio field predicates
	"""
	bio: String
	bioNEQ: String
	bioIn: [String!]
	bioNotIn: [String!]
	bioGT: String
	bioGTE: String
	bioLT: String
	bioLTE: String
	bioContains: String
	bioHasPrefix: String
	bioHasSuffix: String
	bioIsNil: Boolean
	bioNotNil: Boolean
	bioEqualFold: String
	bioContainsFold: String
	"""
	followers edge predicates
	"""
	hasFollowers: Boolean
	hasFollowersWith: [UserWhereInput!]
	"""
	following edge predicates
	"""
	hasFollowing: Boolean
	hasFollowingWith: [UserWhereInput!]
}
