// Code generated by ent, DO NOT EDIT.

package internal

import (
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/pulkitbhardwaj/matrix/internal/predicate"
	"github.com/pulkitbhardwaj/matrix/internal/user"
)

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "email_address" field predicates.
	EmailAddress             *string  `json:"emailAddress,omitempty"`
	EmailAddressNEQ          *string  `json:"emailAddressNEQ,omitempty"`
	EmailAddressIn           []string `json:"emailAddressIn,omitempty"`
	EmailAddressNotIn        []string `json:"emailAddressNotIn,omitempty"`
	EmailAddressGT           *string  `json:"emailAddressGT,omitempty"`
	EmailAddressGTE          *string  `json:"emailAddressGTE,omitempty"`
	EmailAddressLT           *string  `json:"emailAddressLT,omitempty"`
	EmailAddressLTE          *string  `json:"emailAddressLTE,omitempty"`
	EmailAddressContains     *string  `json:"emailAddressContains,omitempty"`
	EmailAddressHasPrefix    *string  `json:"emailAddressHasPrefix,omitempty"`
	EmailAddressHasSuffix    *string  `json:"emailAddressHasSuffix,omitempty"`
	EmailAddressEqualFold    *string  `json:"emailAddressEqualFold,omitempty"`
	EmailAddressContainsFold *string  `json:"emailAddressContainsFold,omitempty"`

	// "user_name" field predicates.
	UserName             *string  `json:"userName,omitempty"`
	UserNameNEQ          *string  `json:"userNameNEQ,omitempty"`
	UserNameIn           []string `json:"userNameIn,omitempty"`
	UserNameNotIn        []string `json:"userNameNotIn,omitempty"`
	UserNameGT           *string  `json:"userNameGT,omitempty"`
	UserNameGTE          *string  `json:"userNameGTE,omitempty"`
	UserNameLT           *string  `json:"userNameLT,omitempty"`
	UserNameLTE          *string  `json:"userNameLTE,omitempty"`
	UserNameContains     *string  `json:"userNameContains,omitempty"`
	UserNameHasPrefix    *string  `json:"userNameHasPrefix,omitempty"`
	UserNameHasSuffix    *string  `json:"userNameHasSuffix,omitempty"`
	UserNameEqualFold    *string  `json:"userNameEqualFold,omitempty"`
	UserNameContainsFold *string  `json:"userNameContainsFold,omitempty"`

	// "bio" field predicates.
	Bio             *string  `json:"bio,omitempty"`
	BioNEQ          *string  `json:"bioNEQ,omitempty"`
	BioIn           []string `json:"bioIn,omitempty"`
	BioNotIn        []string `json:"bioNotIn,omitempty"`
	BioGT           *string  `json:"bioGT,omitempty"`
	BioGTE          *string  `json:"bioGTE,omitempty"`
	BioLT           *string  `json:"bioLT,omitempty"`
	BioLTE          *string  `json:"bioLTE,omitempty"`
	BioContains     *string  `json:"bioContains,omitempty"`
	BioHasPrefix    *string  `json:"bioHasPrefix,omitempty"`
	BioHasSuffix    *string  `json:"bioHasSuffix,omitempty"`
	BioIsNil        bool     `json:"bioIsNil,omitempty"`
	BioNotNil       bool     `json:"bioNotNil,omitempty"`
	BioEqualFold    *string  `json:"bioEqualFold,omitempty"`
	BioContainsFold *string  `json:"bioContainsFold,omitempty"`

	// "followers" edge predicates.
	HasFollowers     *bool             `json:"hasFollowers,omitempty"`
	HasFollowersWith []*UserWhereInput `json:"hasFollowersWith,omitempty"`

	// "following" edge predicates.
	HasFollowing     *bool             `json:"hasFollowing,omitempty"`
	HasFollowingWith []*UserWhereInput `json:"hasFollowingWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("internal: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.FirstName != nil {
		predicates = append(predicates, user.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, user.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, user.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, user.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, user.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, user.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, user.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, user.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, user.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, user.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, user.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, user.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, user.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, user.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, user.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, user.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, user.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, user.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, user.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, user.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, user.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, user.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, user.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, user.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, user.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, user.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.EmailAddress != nil {
		predicates = append(predicates, user.EmailAddressEQ(*i.EmailAddress))
	}
	if i.EmailAddressNEQ != nil {
		predicates = append(predicates, user.EmailAddressNEQ(*i.EmailAddressNEQ))
	}
	if len(i.EmailAddressIn) > 0 {
		predicates = append(predicates, user.EmailAddressIn(i.EmailAddressIn...))
	}
	if len(i.EmailAddressNotIn) > 0 {
		predicates = append(predicates, user.EmailAddressNotIn(i.EmailAddressNotIn...))
	}
	if i.EmailAddressGT != nil {
		predicates = append(predicates, user.EmailAddressGT(*i.EmailAddressGT))
	}
	if i.EmailAddressGTE != nil {
		predicates = append(predicates, user.EmailAddressGTE(*i.EmailAddressGTE))
	}
	if i.EmailAddressLT != nil {
		predicates = append(predicates, user.EmailAddressLT(*i.EmailAddressLT))
	}
	if i.EmailAddressLTE != nil {
		predicates = append(predicates, user.EmailAddressLTE(*i.EmailAddressLTE))
	}
	if i.EmailAddressContains != nil {
		predicates = append(predicates, user.EmailAddressContains(*i.EmailAddressContains))
	}
	if i.EmailAddressHasPrefix != nil {
		predicates = append(predicates, user.EmailAddressHasPrefix(*i.EmailAddressHasPrefix))
	}
	if i.EmailAddressHasSuffix != nil {
		predicates = append(predicates, user.EmailAddressHasSuffix(*i.EmailAddressHasSuffix))
	}
	if i.EmailAddressEqualFold != nil {
		predicates = append(predicates, user.EmailAddressEqualFold(*i.EmailAddressEqualFold))
	}
	if i.EmailAddressContainsFold != nil {
		predicates = append(predicates, user.EmailAddressContainsFold(*i.EmailAddressContainsFold))
	}
	if i.UserName != nil {
		predicates = append(predicates, user.UserNameEQ(*i.UserName))
	}
	if i.UserNameNEQ != nil {
		predicates = append(predicates, user.UserNameNEQ(*i.UserNameNEQ))
	}
	if len(i.UserNameIn) > 0 {
		predicates = append(predicates, user.UserNameIn(i.UserNameIn...))
	}
	if len(i.UserNameNotIn) > 0 {
		predicates = append(predicates, user.UserNameNotIn(i.UserNameNotIn...))
	}
	if i.UserNameGT != nil {
		predicates = append(predicates, user.UserNameGT(*i.UserNameGT))
	}
	if i.UserNameGTE != nil {
		predicates = append(predicates, user.UserNameGTE(*i.UserNameGTE))
	}
	if i.UserNameLT != nil {
		predicates = append(predicates, user.UserNameLT(*i.UserNameLT))
	}
	if i.UserNameLTE != nil {
		predicates = append(predicates, user.UserNameLTE(*i.UserNameLTE))
	}
	if i.UserNameContains != nil {
		predicates = append(predicates, user.UserNameContains(*i.UserNameContains))
	}
	if i.UserNameHasPrefix != nil {
		predicates = append(predicates, user.UserNameHasPrefix(*i.UserNameHasPrefix))
	}
	if i.UserNameHasSuffix != nil {
		predicates = append(predicates, user.UserNameHasSuffix(*i.UserNameHasSuffix))
	}
	if i.UserNameEqualFold != nil {
		predicates = append(predicates, user.UserNameEqualFold(*i.UserNameEqualFold))
	}
	if i.UserNameContainsFold != nil {
		predicates = append(predicates, user.UserNameContainsFold(*i.UserNameContainsFold))
	}
	if i.Bio != nil {
		predicates = append(predicates, user.BioEQ(*i.Bio))
	}
	if i.BioNEQ != nil {
		predicates = append(predicates, user.BioNEQ(*i.BioNEQ))
	}
	if len(i.BioIn) > 0 {
		predicates = append(predicates, user.BioIn(i.BioIn...))
	}
	if len(i.BioNotIn) > 0 {
		predicates = append(predicates, user.BioNotIn(i.BioNotIn...))
	}
	if i.BioGT != nil {
		predicates = append(predicates, user.BioGT(*i.BioGT))
	}
	if i.BioGTE != nil {
		predicates = append(predicates, user.BioGTE(*i.BioGTE))
	}
	if i.BioLT != nil {
		predicates = append(predicates, user.BioLT(*i.BioLT))
	}
	if i.BioLTE != nil {
		predicates = append(predicates, user.BioLTE(*i.BioLTE))
	}
	if i.BioContains != nil {
		predicates = append(predicates, user.BioContains(*i.BioContains))
	}
	if i.BioHasPrefix != nil {
		predicates = append(predicates, user.BioHasPrefix(*i.BioHasPrefix))
	}
	if i.BioHasSuffix != nil {
		predicates = append(predicates, user.BioHasSuffix(*i.BioHasSuffix))
	}
	if i.BioIsNil {
		predicates = append(predicates, user.BioIsNil())
	}
	if i.BioNotNil {
		predicates = append(predicates, user.BioNotNil())
	}
	if i.BioEqualFold != nil {
		predicates = append(predicates, user.BioEqualFold(*i.BioEqualFold))
	}
	if i.BioContainsFold != nil {
		predicates = append(predicates, user.BioContainsFold(*i.BioContainsFold))
	}

	if i.HasFollowers != nil {
		p := user.HasFollowers()
		if !*i.HasFollowers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowersWith))
		for _, w := range i.HasFollowersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowersWith(with...))
	}
	if i.HasFollowing != nil {
		p := user.HasFollowing()
		if !*i.HasFollowing {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowingWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowingWith))
		for _, w := range i.HasFollowingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowingWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
